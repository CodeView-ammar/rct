"""
Django settings for training project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
# from dotenv import load_dotenv


# migrations 
Engine="django.db.backends.mysql"
User="admin_oaks"
password="g4rT3MsSvjMaPuMMrMLLgWBtKwMABj"
Host="localhost" 
PORT= "3306"
DATABASES = {"default": {
            "ENGINE":Engine,  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
            "NAME": "trainers",  # Or path to database file if using sqlite3.
            "USER": User,  # Not used with sqlite3.
            "PASSWORD": password,  # Not used with sqlite3.
            "HOST": Host,  # Set to empty string for localhost. Not used with sqlite3.
            "PORT":PORT,
        
            
        }
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
CORE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'btto22lwu2c&2#q88dty1go7u)y&e@hf6vw!+5+by7&gejn*hi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

INSTALLED_APPS = [
     "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    # "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    'dal_queryset_sequence',
    "django.contrib.sites",
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'our_core',
    'permission',
    'crispy_forms',
    "our_notifications",
    'crispy_bootstrap4',
    # 'translations',
    'dal',
    'dal_select2',
    # view table befor print
   "compressor",
   "guardian",
   'import_export',

]
SITE_ID = 1 
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
    "compressor.finders.CompressorFinder"
)
COMPRESS_ENABLED = True
PIPELINE = {
    'PIPELINE_ENABLED': True,
    'JAVASCRIPT': {
        'stats': {
            'source_filenames': (
              'js/jquery.js',
              'js/d3.js',
              'js/staticfile/*.js',
              'js/application.js',
            ),
            'output_filename': 'js/stats.js',
        }
    }
}
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "django.middleware.locale.LocaleMiddleware",
    'django.middleware.common.CommonMiddleware',
    'training.middleware.UserLocaleMiddleware',
    "our_core.our_middleware.RequestMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'training.middleware.LoginRequiredMiddleware',
    
]


def dashboard_callback(request, context):
    """
    Callback to prepare custom variables for index template which is used as dashboard
    template. It can be overridden in application by creating custom admin/index.html.
    """
    context.update(
        {
            "sample": "example",  # this will be injected into templates/admin/index.html
        }
    )
    return context


def environment_callback(request):
    """
    Callback has to return a list of two values represeting text value and the color
    type of the label displayed in top right corner.
    """
    return ["Production", "danger"] # info, danger, warning, success


def badge_callback(request):
    return 3

def permission_callback(request):
    return request.user.has_perm("init_input.change_model")

CRISPY_TEMPLATE_PACK = 'bootstrap4'
AUTHENTICATION_BACKENDS = (
    'guardian.backends.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend', # this is default
)



LOGIN_REQUIRED_IGNORE_PATHS = [
    "logout",
    "login",
    'restore',
]
LOGIN_REQUIRED_IGNORE_VIEW_NAMES = [
    "logout",
    "login",
    'restore',
]
ROOT_URLCONF = 'training.urls'



TEMPLATE_DIR = os.path.join(CORE_DIR, "templates")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, "our_core/templates"),
            
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                "django.template.context_processors.media",
                'django.contrib.messages.context_processors.messages',
                
            ],
             # ! New Line
            'libraries':{
                'form_status': 'our_core.templatetags.form_status',
                # 'my_templatetag': 'app.templatetags.my_templatetag',
            }
        },
    },
]





# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ar'  # default (fallback) language
# LANGUAGE_CODE = 'en-us'

LANGUAGES = (            # supported languages
    ('ar', 'Arabic'),
    ('en', 'English'),

)
# LOCALE_PATHS = (
#     BASE_DIR + 'locale/', )
#########################################################################
TIME_ZONE = 'Asia/Riyadh'


USE_I18N = True          # use internationalization
USE_L10N = True          # use localization
USE_TZ = True
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# STATIC_ROOT='D://training/accounting-master/static'
# MEDIA_ROOT='D://training/accounting-master/media'
STATIC_ROOT =  os.path.join(BASE_DIR, 'statics/')


AUTH_USER_MODEL = "permission.UsersDetiles"


FILE_UPLOAD_HANDLERS = (
    "django_excel.ExcelMemoryFileUploadHandler",
    "django_excel.TemporaryExcelFileUploadHandler",
)

# # Application definition
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_ENGINE = 'our_core.sessions'
SESSION_CACHE_ALIAS = "default"
# SESSION_SERIALIZER="django.contrib.sessions.serializers.PickleSerializer"
# Cache time for static files
STATICFILES_CACHE_MAX_AGE = 60 * 60 * 24 * 7  # 1 week

# Use Django's built-in cache
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'


LOGIN_REDIRECT_URL = "index"
LOGOUT_REDIRECT_URL = "login/?next=/"
APPEND_SLASH = False


LOGIN_URL = "login"
CSRF_COOKIE_HTTPONLY = False

TEMPLATE_CONTEXT_PROCESSORS = (
    "django.core.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.request",
    'django.template.context_processors.media',
    'django.core.context_processors.static',

)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Path where media is stored

MEDIA_URL = "media/"
MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')

# MEDIA_URL = "/media/"
# MEDIA_ROOT = BASE_DIR / "media"


BACKUP_PATH = os.path.join(BASE_DIR, "backups")

# DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
# DBBACKUP_STORAGE_OPTIONS = {'location': '/my/backup/dir/'}
 
# DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
# DBBACKUP_STORAGE_OPTIONS = {"location": BACKUP_PATH}

 
FIXTURE_DIRS = [
    os.path.join(BASE_DIR, "fixtures"),
]
ALLOW_UNICODE_SLUGS = True






SERIALIZATION_MODULES = {  
    "csv": "path.to.csv.serializer",  
    "txt": "path.to.txt.serializer",  
}  
SESSION_COOKIE_AGE = 30 * 24 * 60 * 60
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

import ast
def find_settings_files(path):
    for root, dirs, files in os.walk(path):
        for file in files:
            if file == "hooks.py":
                yield os.path.join(root, file)

def find_app_name(settings_file):
    """
    Extracts the `app_name` variable from a Django settings file.

    Args:
        settings_file (str): Path to the settings.py file.

    Returns:
        str: The extracted app_name or None if not found.
    """

    with open(settings_file, "r") as f:
        settings_code = f.read()

    try:
        tree = ast.parse(settings_code)
    except (SyntaxError, FileNotFoundError) as e:
        print(f"Error parsing {settings_file}: {e}")
        return None

    for node in ast.walk(tree):
        if isinstance(node, ast.Assign) and node.targets[0].id == 'app_name':
            # Check for both Constant (literal) and Name (variable) assignments
            if isinstance(node.value, ast.Constant):
                return node.value.value  # Return the literal value
            else:
                return node.value.id  # Return the variable name

    return None

settings_files = list(find_settings_files(BASE_DIR))
from django.conf import settings
from importlib import import_module
for settings_file in settings_files:
    app_name = find_app_name(settings_file)
    if app_name:
        if not app_name in INSTALLED_APPS:
            INSTALLED_APPS+=[app_name]
        sub_apps_module = import_module(app_name+".hooks")
        if sub_apps_module:
            list_app=sub_apps_module.sub_app_name
            if list_app:
                for list_app_ in list_app:
                    TEMPLATES[0]["DIRS"] += [os.path.join(BASE_DIR, app_name+"/"+list_app_+"/templates")]

    with open(settings_file, "r") as f:
        app_settings = f.read()
    exec(app_settings, settings.__dict__)  # Include settings into main settings



from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

UNFOLD = {
    "SITE_TITLE": None,
    "SITE_HEADER": None,
    "SITE_URL": "/",
    "SITE_ICON": lambda request: static("icon.svg"),  # both modes, optimise for 32px height
    "SITE_ICON": {
        "light": lambda request: static("icon-light.svg"),  # light mode
        "dark": lambda request: static("icon-dark.svg"),  # dark mode
    },
    # "SITE_LOGO": lambda request: static("logo.svg"),  # both modes, optimise for 32px height
    "SITE_LOGO": {
        "light": lambda request: static("logo-light.svg"),  # light mode
        "dark": lambda request: static("logo-dark.svg"),  # dark mode
    },
    "SITE_SYMBOL": "speed",  # symbol from icon set
    "SHOW_HISTORY": True, # show/hide "History" button, default: True
    "SHOW_VIEW_ON_SITE": True, # show/hide "View on site" button, default: True
    "ENVIRONMENT": "init_input.environment_callback",
    "DASHBOARD_CALLBACK": "training.home.dashboard_callback",
    "THEME": "dark", # Force theme: "dark" or "light". Will disable theme switcher
    "LOGIN": {
        "image": lambda request: static("sample/login-bg.jpg"),
        "redirect_after": lambda request: reverse_lazy("admin:index"),
    },
    "STYLES": [
        lambda request: static("css/style.css"),
    ],
    "SCRIPTS": [
        lambda request: static("js/script.js"),
    ],
    "COLORS": {
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "216 180 254",
            "400": "192 132 252",
            "500": "168 85 247",
            "600": "147 51 234",
            "700": "126 34 206",
            "800": "107 33 168",
            "900": "88 28 135",
            "950": "59 7 100",
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "🇬🇧",
                "ar": "ar",
            },
        },
    },
    "SIDEBAR": {
        "show_search": True,  # Search in applications and models names
        "show_all_applications": False,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": _("الرئيسي"),
                "separator": True,  # Top border
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ]
            },
            {
                "title": _("التهيئة العامة"),
                "separator": True,  # Top border
                "items": [
                    {
                        "title": _("Building"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("BuildingView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": _("Department"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("DepartmentView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": _("TypeFile"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("TypeFileView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": _("Section"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("SectionView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": _("Cuntry"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("CuntryView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": _("Subject"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("SubjectView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Division"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("DivisionView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
             {
                "title": _("المدخلات الأساسية"),
                "separator": True,  # Top border
                "items": [
                    {
                        "title": _("Trainer"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("TrainerView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": _("Tracking"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("TrackingView"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Details Tracking"),
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("DetailsTrackingView"),
                        "permission": lambda request: request.user.is_superuser,
                    },  
                ],
            },
        ],
    },
   
}
